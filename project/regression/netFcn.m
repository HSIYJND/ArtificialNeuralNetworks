function [Y,Xf,Af] = netFcn(X,~,~)
%NETFCN neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 09-Apr-2016 19:05:12.
% 
% [Y] = netFcn(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [0.0005;0.00132];
  x1_step1_gain = [2.00169743942864;2.00298043488711];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [6.265090990820890049;3.7992144625551986792;-5.3743977971174938801;2.9454986873874449138;4.9850300819503052807;4.1888416550098588331;3.0888282378907723214;-1.9434603296463530686;-2.9138425722295591136;-0.040171497436296860206;-0.019026995281443043889;0.426506277782345955;0.036379882458974950599;0.059789527282956937693;-0.70450267456957171852;-0.53833074288258142559;1.8926885217985407461;2.6938099694985373489;-2.6233052278291677517;-3.6863937032475941891;4.05799688088558419;-3.438454976056944723;5.6632824066145852626;3.2778969873055578965;-8.3438029467161296537];
  IW1_1 = [-6.0365514483323607919 2.8148537409574410084;0.21569531343656986322 3.9736999925782048315;1.6331277089706019989 5.3498299128230284438;-3.4291276112106228169 2.193804182522423929;-4.4885165344739723636 -2.7784847552564495565;-2.1809433501338615358 -5.3930598707642900536;-2.9586209458654559867 -3.386696465581875426;3.6366089385601019224 0.5584596713925462641;2.4642004632763208072 5.4413441904200414712;2.4314381979500763187 -1.5088821511548096144;-3.2559758499491797679 -2.4850240848382765257;-2.9832241713415181827 5.1523945165335716112;2.2808828241792804548 2.0744828395442951319;-2.1990537581973317316 -0.15886022249631176484;-0.71482612766451536501 -6.4181198427492223146;-0.41603028187062118803 -4.1719839643764071724;3.6293205117919540292 5.4466289745151446056;2.4261647002874089374 4.4447034896677495297;-1.3459946172481473958 3.8172395013815063614;-3.369504217277999647 -2.3200563943795975419;1.4869626679299736693 5.0420602090924893091;-3.7171415985063878118 1.4195109188448227222;1.1525997657071640479 5.6535360664995977231;0.37205609622856905538 -3.0365585815700857353;-2.7488642088898473936 -5.52975524194791479];
  
  % Layer 2
  b2 = 2.0662532777710880261;
  LW2_1 = [-0.20282199866130934396 2.6361016715468528204 -0.30555694275560923989 -0.36191946740319219655 -0.29859091818577310207 0.3194959999904395942 -0.23053884304565830377 0.27680944316317385168 -0.17187219122364860713 -0.36551435597292974977 -0.36622978531513167288 -0.033695074298237266686 -1.0801071657648029234 -0.75185672969141226218 0.25371603647009594029 -0.93269820441746476014 -0.14747007704708900433 -0.4004307065234804508 0.22824621496635824625 -0.25904477664866620845 -0.7771768284214741751 -0.182177568472980278 -1.3759830324375685873 -1.114669994102321926 1.3038928301175762847];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = 0.780356506579446;
  y1_step1_xoffset = 1.94857784848485;
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
